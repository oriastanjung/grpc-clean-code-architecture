// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: business/business.proto

package business

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BusinessRoutesService_CreateBusiness_FullMethodName = "/business.BusinessRoutesService/CreateBusiness"
	BusinessRoutesService_UpdateBusiness_FullMethodName = "/business.BusinessRoutesService/UpdateBusiness"
	BusinessRoutesService_DeleteBusiness_FullMethodName = "/business.BusinessRoutesService/DeleteBusiness"
	BusinessRoutesService_GetBusiness_FullMethodName    = "/business.BusinessRoutesService/GetBusiness"
	BusinessRoutesService_ListBusiness_FullMethodName   = "/business.BusinessRoutesService/ListBusiness"
)

// BusinessRoutesServiceClient is the client API for BusinessRoutesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessRoutesServiceClient interface {
	CreateBusiness(ctx context.Context, in *CreateBusinessRequest, opts ...grpc.CallOption) (*CreateBusinessResponse, error)
	UpdateBusiness(ctx context.Context, in *UpdateBusinessRequest, opts ...grpc.CallOption) (*UpdateBusinessResponse, error)
	DeleteBusiness(ctx context.Context, in *DeleteBusinessRequest, opts ...grpc.CallOption) (*DeleteBusinessResponse, error)
	GetBusiness(ctx context.Context, in *GetBusinessRequest, opts ...grpc.CallOption) (*GetBusinessResponse, error)
	ListBusiness(ctx context.Context, in *ListBusinessRequest, opts ...grpc.CallOption) (*ListBusinessResponse, error)
}

type businessRoutesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessRoutesServiceClient(cc grpc.ClientConnInterface) BusinessRoutesServiceClient {
	return &businessRoutesServiceClient{cc}
}

func (c *businessRoutesServiceClient) CreateBusiness(ctx context.Context, in *CreateBusinessRequest, opts ...grpc.CallOption) (*CreateBusinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBusinessResponse)
	err := c.cc.Invoke(ctx, BusinessRoutesService_CreateBusiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessRoutesServiceClient) UpdateBusiness(ctx context.Context, in *UpdateBusinessRequest, opts ...grpc.CallOption) (*UpdateBusinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBusinessResponse)
	err := c.cc.Invoke(ctx, BusinessRoutesService_UpdateBusiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessRoutesServiceClient) DeleteBusiness(ctx context.Context, in *DeleteBusinessRequest, opts ...grpc.CallOption) (*DeleteBusinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBusinessResponse)
	err := c.cc.Invoke(ctx, BusinessRoutesService_DeleteBusiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessRoutesServiceClient) GetBusiness(ctx context.Context, in *GetBusinessRequest, opts ...grpc.CallOption) (*GetBusinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBusinessResponse)
	err := c.cc.Invoke(ctx, BusinessRoutesService_GetBusiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessRoutesServiceClient) ListBusiness(ctx context.Context, in *ListBusinessRequest, opts ...grpc.CallOption) (*ListBusinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBusinessResponse)
	err := c.cc.Invoke(ctx, BusinessRoutesService_ListBusiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessRoutesServiceServer is the server API for BusinessRoutesService service.
// All implementations must embed UnimplementedBusinessRoutesServiceServer
// for forward compatibility.
type BusinessRoutesServiceServer interface {
	CreateBusiness(context.Context, *CreateBusinessRequest) (*CreateBusinessResponse, error)
	UpdateBusiness(context.Context, *UpdateBusinessRequest) (*UpdateBusinessResponse, error)
	DeleteBusiness(context.Context, *DeleteBusinessRequest) (*DeleteBusinessResponse, error)
	GetBusiness(context.Context, *GetBusinessRequest) (*GetBusinessResponse, error)
	ListBusiness(context.Context, *ListBusinessRequest) (*ListBusinessResponse, error)
	mustEmbedUnimplementedBusinessRoutesServiceServer()
}

// UnimplementedBusinessRoutesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBusinessRoutesServiceServer struct{}

func (UnimplementedBusinessRoutesServiceServer) CreateBusiness(context.Context, *CreateBusinessRequest) (*CreateBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusiness not implemented")
}
func (UnimplementedBusinessRoutesServiceServer) UpdateBusiness(context.Context, *UpdateBusinessRequest) (*UpdateBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusiness not implemented")
}
func (UnimplementedBusinessRoutesServiceServer) DeleteBusiness(context.Context, *DeleteBusinessRequest) (*DeleteBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusiness not implemented")
}
func (UnimplementedBusinessRoutesServiceServer) GetBusiness(context.Context, *GetBusinessRequest) (*GetBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusiness not implemented")
}
func (UnimplementedBusinessRoutesServiceServer) ListBusiness(context.Context, *ListBusinessRequest) (*ListBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusiness not implemented")
}
func (UnimplementedBusinessRoutesServiceServer) mustEmbedUnimplementedBusinessRoutesServiceServer() {}
func (UnimplementedBusinessRoutesServiceServer) testEmbeddedByValue()                               {}

// UnsafeBusinessRoutesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessRoutesServiceServer will
// result in compilation errors.
type UnsafeBusinessRoutesServiceServer interface {
	mustEmbedUnimplementedBusinessRoutesServiceServer()
}

func RegisterBusinessRoutesServiceServer(s grpc.ServiceRegistrar, srv BusinessRoutesServiceServer) {
	// If the following call pancis, it indicates UnimplementedBusinessRoutesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BusinessRoutesService_ServiceDesc, srv)
}

func _BusinessRoutesService_CreateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRoutesServiceServer).CreateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessRoutesService_CreateBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRoutesServiceServer).CreateBusiness(ctx, req.(*CreateBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessRoutesService_UpdateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRoutesServiceServer).UpdateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessRoutesService_UpdateBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRoutesServiceServer).UpdateBusiness(ctx, req.(*UpdateBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessRoutesService_DeleteBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRoutesServiceServer).DeleteBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessRoutesService_DeleteBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRoutesServiceServer).DeleteBusiness(ctx, req.(*DeleteBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessRoutesService_GetBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRoutesServiceServer).GetBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessRoutesService_GetBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRoutesServiceServer).GetBusiness(ctx, req.(*GetBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessRoutesService_ListBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRoutesServiceServer).ListBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessRoutesService_ListBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRoutesServiceServer).ListBusiness(ctx, req.(*ListBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessRoutesService_ServiceDesc is the grpc.ServiceDesc for BusinessRoutesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessRoutesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "business.BusinessRoutesService",
	HandlerType: (*BusinessRoutesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBusiness",
			Handler:    _BusinessRoutesService_CreateBusiness_Handler,
		},
		{
			MethodName: "UpdateBusiness",
			Handler:    _BusinessRoutesService_UpdateBusiness_Handler,
		},
		{
			MethodName: "DeleteBusiness",
			Handler:    _BusinessRoutesService_DeleteBusiness_Handler,
		},
		{
			MethodName: "GetBusiness",
			Handler:    _BusinessRoutesService_GetBusiness_Handler,
		},
		{
			MethodName: "ListBusiness",
			Handler:    _BusinessRoutesService_ListBusiness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "business/business.proto",
}

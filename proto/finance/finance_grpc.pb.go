// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: finance/finance.proto

package finance

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FinanceRoutesService_CreateFinance_FullMethodName = "/finance.FinanceRoutesService/CreateFinance"
	FinanceRoutesService_ListFinance_FullMethodName   = "/finance.FinanceRoutesService/ListFinance"
	FinanceRoutesService_GetFinance_FullMethodName    = "/finance.FinanceRoutesService/GetFinance"
	FinanceRoutesService_UpdateFinance_FullMethodName = "/finance.FinanceRoutesService/UpdateFinance"
	FinanceRoutesService_DeleteFinance_FullMethodName = "/finance.FinanceRoutesService/DeleteFinance"
)

// FinanceRoutesServiceClient is the client API for FinanceRoutesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinanceRoutesServiceClient interface {
	CreateFinance(ctx context.Context, in *CreateFinanceRequest, opts ...grpc.CallOption) (*CreateFinanceResponse, error)
	ListFinance(ctx context.Context, in *ListFinanceRequest, opts ...grpc.CallOption) (*ListFinanceResponse, error)
	GetFinance(ctx context.Context, in *GetFinanceRequest, opts ...grpc.CallOption) (*GetFinanceResponse, error)
	UpdateFinance(ctx context.Context, in *UpdateFinanceRequest, opts ...grpc.CallOption) (*UpdateFinanceResponse, error)
	DeleteFinance(ctx context.Context, in *DeleteFinanceRequest, opts ...grpc.CallOption) (*DeleteFinanceResponse, error)
}

type financeRoutesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFinanceRoutesServiceClient(cc grpc.ClientConnInterface) FinanceRoutesServiceClient {
	return &financeRoutesServiceClient{cc}
}

func (c *financeRoutesServiceClient) CreateFinance(ctx context.Context, in *CreateFinanceRequest, opts ...grpc.CallOption) (*CreateFinanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFinanceResponse)
	err := c.cc.Invoke(ctx, FinanceRoutesService_CreateFinance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeRoutesServiceClient) ListFinance(ctx context.Context, in *ListFinanceRequest, opts ...grpc.CallOption) (*ListFinanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFinanceResponse)
	err := c.cc.Invoke(ctx, FinanceRoutesService_ListFinance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeRoutesServiceClient) GetFinance(ctx context.Context, in *GetFinanceRequest, opts ...grpc.CallOption) (*GetFinanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFinanceResponse)
	err := c.cc.Invoke(ctx, FinanceRoutesService_GetFinance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeRoutesServiceClient) UpdateFinance(ctx context.Context, in *UpdateFinanceRequest, opts ...grpc.CallOption) (*UpdateFinanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFinanceResponse)
	err := c.cc.Invoke(ctx, FinanceRoutesService_UpdateFinance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeRoutesServiceClient) DeleteFinance(ctx context.Context, in *DeleteFinanceRequest, opts ...grpc.CallOption) (*DeleteFinanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFinanceResponse)
	err := c.cc.Invoke(ctx, FinanceRoutesService_DeleteFinance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinanceRoutesServiceServer is the server API for FinanceRoutesService service.
// All implementations must embed UnimplementedFinanceRoutesServiceServer
// for forward compatibility.
type FinanceRoutesServiceServer interface {
	CreateFinance(context.Context, *CreateFinanceRequest) (*CreateFinanceResponse, error)
	ListFinance(context.Context, *ListFinanceRequest) (*ListFinanceResponse, error)
	GetFinance(context.Context, *GetFinanceRequest) (*GetFinanceResponse, error)
	UpdateFinance(context.Context, *UpdateFinanceRequest) (*UpdateFinanceResponse, error)
	DeleteFinance(context.Context, *DeleteFinanceRequest) (*DeleteFinanceResponse, error)
	mustEmbedUnimplementedFinanceRoutesServiceServer()
}

// UnimplementedFinanceRoutesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFinanceRoutesServiceServer struct{}

func (UnimplementedFinanceRoutesServiceServer) CreateFinance(context.Context, *CreateFinanceRequest) (*CreateFinanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFinance not implemented")
}
func (UnimplementedFinanceRoutesServiceServer) ListFinance(context.Context, *ListFinanceRequest) (*ListFinanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFinance not implemented")
}
func (UnimplementedFinanceRoutesServiceServer) GetFinance(context.Context, *GetFinanceRequest) (*GetFinanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinance not implemented")
}
func (UnimplementedFinanceRoutesServiceServer) UpdateFinance(context.Context, *UpdateFinanceRequest) (*UpdateFinanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFinance not implemented")
}
func (UnimplementedFinanceRoutesServiceServer) DeleteFinance(context.Context, *DeleteFinanceRequest) (*DeleteFinanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFinance not implemented")
}
func (UnimplementedFinanceRoutesServiceServer) mustEmbedUnimplementedFinanceRoutesServiceServer() {}
func (UnimplementedFinanceRoutesServiceServer) testEmbeddedByValue()                              {}

// UnsafeFinanceRoutesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinanceRoutesServiceServer will
// result in compilation errors.
type UnsafeFinanceRoutesServiceServer interface {
	mustEmbedUnimplementedFinanceRoutesServiceServer()
}

func RegisterFinanceRoutesServiceServer(s grpc.ServiceRegistrar, srv FinanceRoutesServiceServer) {
	// If the following call pancis, it indicates UnimplementedFinanceRoutesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FinanceRoutesService_ServiceDesc, srv)
}

func _FinanceRoutesService_CreateFinance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFinanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceRoutesServiceServer).CreateFinance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceRoutesService_CreateFinance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceRoutesServiceServer).CreateFinance(ctx, req.(*CreateFinanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceRoutesService_ListFinance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFinanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceRoutesServiceServer).ListFinance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceRoutesService_ListFinance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceRoutesServiceServer).ListFinance(ctx, req.(*ListFinanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceRoutesService_GetFinance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceRoutesServiceServer).GetFinance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceRoutesService_GetFinance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceRoutesServiceServer).GetFinance(ctx, req.(*GetFinanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceRoutesService_UpdateFinance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFinanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceRoutesServiceServer).UpdateFinance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceRoutesService_UpdateFinance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceRoutesServiceServer).UpdateFinance(ctx, req.(*UpdateFinanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceRoutesService_DeleteFinance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFinanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceRoutesServiceServer).DeleteFinance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceRoutesService_DeleteFinance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceRoutesServiceServer).DeleteFinance(ctx, req.(*DeleteFinanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinanceRoutesService_ServiceDesc is the grpc.ServiceDesc for FinanceRoutesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinanceRoutesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance.FinanceRoutesService",
	HandlerType: (*FinanceRoutesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFinance",
			Handler:    _FinanceRoutesService_CreateFinance_Handler,
		},
		{
			MethodName: "ListFinance",
			Handler:    _FinanceRoutesService_ListFinance_Handler,
		},
		{
			MethodName: "GetFinance",
			Handler:    _FinanceRoutesService_GetFinance_Handler,
		},
		{
			MethodName: "UpdateFinance",
			Handler:    _FinanceRoutesService_UpdateFinance_Handler,
		},
		{
			MethodName: "DeleteFinance",
			Handler:    _FinanceRoutesService_DeleteFinance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance/finance.proto",
}
